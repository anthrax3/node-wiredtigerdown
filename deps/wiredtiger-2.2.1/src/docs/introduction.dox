/*! @mainpage Reference Guide

WiredTiger is an high performance, scalable, production quality, NoSQL,
Open Source extensible platform for data management.

WiredTiger supports row-oriented storage (where all columns of a row are
stored together), and column-oriented storage (where columns are stored
in groups), allowing for more efficient access and storage of column
subsets.  Additionally, WiredTiger supports log-structured merge trees
(LSM), for sustained throughput under random insert workloads.

WiredTiger includes ACID transactions with standard isolation levels and
durability at both checkpoint and fine-grained granularity.

WiredTiger can be used as a simple key/value store, but also has a
complete schema layer, including indices and projections.

For more information on the WiredTiger architecture and why it might be
right for your project, see:

- @subpage architecture

This documentation describes the programming interface to WiredTiger
used by developers to construct applications.  We follow SQL
terminology: a database is set of tables managed together.  Tables
consist of rows, where each row is a key and its associated value.
Tables may optionally have an associated schema, splitting the value
into a set of columns.  Tables may also have associated indices, each
of which is ordered by one or more columns.

WiredTiger distributions are tested on Linux, FreeBSD and OS X.
WiredTiger is portable to any 64-bit system supporting the ANSI C99,
POSIX 1003.1 and POSIX 1003.1c (threads extension) standards.

For more information about using WiredTiger, see:

- @subpage install

- @subpage programming

- @ref wt "WiredTiger API reference manual"

- @subpage command_line

- @subpage upgrading

- @subpage md_changelog

- @subpage admin

- @subpage license

To browse the WiredTiger source code or contact us, see:

- @subpage community

*/
